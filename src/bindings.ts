
         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         /** user-defined commands **/

         export const commands = {
async generateBackground(imagePath: string, rectData: RectData, isBlack: boolean) : Promise<void> {
await TAURI_INVOKE("generate_background", { imagePath, rectData, isBlack });
},
async readFile(path: string) : Promise<Result<number[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("read_file", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async removeWatermark(mangaDir: string, outputDir: string) : Promise<void> {
await TAURI_INVOKE("remove_watermark", { mangaDir, outputDir });
},
async backgroundExists(isBlack: boolean) : Promise<boolean> {
return await TAURI_INVOKE("background_exists", { isBlack });
},
async openImage(path: string) : Promise<JpgImage | null> {
return await TAURI_INVOKE("open_image", { path });
},
async openBackground(isBlack: boolean) : Promise<JpgImage | null> {
return await TAURI_INVOKE("open_background", { isBlack });
}
}

         /** user-defined events **/



         /** user-defined statics **/

         

/** user-defined types **/

export type JpgImage = { width: number; height: number; src: string; path: string }
export type RectData = { left: number; top: number; right: number; bottom: number }

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     